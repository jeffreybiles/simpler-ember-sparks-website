<% content_for :head do %>
  <meta property="og:image" content="<%= @post.thumbnail_image %>">

  <script src="//fast.wistia.com/static/embed_shepherd-v1.js"></script>
  <script>
    wistiaEmbeds.onFind(function(video) {
      video.videoFoam(true);
      video.addPlugin("resumable", {
        src: "//fast.wistia.com/labs/resumable/plugin.js"
      });
    });
  </script>
<% end %>
<% content_for :title, @post.title %>
<% content_for :meta_description, @post.description %>

<div id="single-video">
  <section>
    <div class="jumbotron text-center video_single">
      <div class="container">
        <div class="row">
          <h1><%= @post.title %></h1>
        </div>
      </div>
    </div>
  </section>

  <section class="video_single">
    <div class="container">
      <% if @previous_post %>
      <%= link_to "Previous", @previous_post, class: 'btn light-button' %>
      <% end %>
      <%= link_to "View All", posts_path, class: 'btn light-button' %>
      <% if @next_post %>
      <%= link_to "Next", @next_post, class: 'btn light-button' %>
      <% end %>
      <p id="notice"><%= notice %></p>
      <div class="row">
        <div class="col-md-9">
          <% if @viewable_by_user %>
            <%= render 'video', wistia_embed: @post.wistia_embed %>
          <% else %>
            <div class="sales-box">
              <h2>You can view pro screencasts by subscribing</h2>
              <span class="btn login-path-button"><a href="/users/sign_in">Already a Subscriber? Log in</a></span>
              <%= render 'shared/subscribe' %>
              <span class="btn free-screencasts-button"><a href="/posts?free=true">Show me only Free screencasts</a></span>
            </div>
            <a href="/account">
              <%= image_tag @post.thumbnail_image, class: "img-responsive" %>
            </a>
          <% end %>
        </div>
        <div class="col-md-3" id="playtime">
          <h2 class="header-2"><%= @post.publish_date %> | <%= @post.readable_time %> | <a href="/posts?difficulty<%=@post.difficulty%>"><%=@post.difficulty%></a></h2>
          <p><strong>About this video</strong></p>
          <p><%= raw @markdown.render @post.description %></p>
          <p><%= @post.id %>
          <div class="buttons">
            <% if @code_present %><a class="btn light-button" href="#code">Code</a><% end %>
            <% if @transcript_present %><a class="btn light-button" href="#transcript">Transcript</a><% end %>
          </div>
          <br>
          <!-- put buttons for code, transcript, comments here -->
          <p><strong>More videos like this </strong></p>
          <% @post.tags.each do |tag| %>
            <div class="tag-link"><span class="tag-type"><%= tag.tag_type %></span>:  <%= link_to tag.name, tag_path(tag) %></div>
          <% end %>
          <% if @post.links && @post.links.length > 0 %>
            <br>
            <p><strong>Links</strong></p>
            <%= raw @markdown.render(@post.links) %>
          <% end %>
          <!-- <p align="center"><button type="button" class="btn btn-success">Next Video In Series</button></p>
          <p align="center"><a href="#">Back to Explore</a></p> -->
        </div>
      </div>
    <div>
  </section>
  <!-- <section>
    <div class="container">
      <div class="row">
        <div class="col-md-9">
  		    <div id="transcript">
            <p><strong>Transcript</strong></p>
            <p>First, we will clarify the main concepts of the framework. Next, we’ll go in depth with a step-by-step tutorial that teaches you how to build a simple Web app with Ember.js and Ember-Data, which is Ember’s data storage layer. Then, we will see how views and components help with handling user interactions. Finally, we will dig a little more into Ember-Data and template precompiling.</p>
            <p>Suppose our application handles a collection of users. Well, those users and their informations would be the model. Think of them as the database data. Models may be retrieved and updated by implementing AJAX callbacks inside your routes, or you can rely on Ember-Data (a data-storage abstraction layer) to greatly simplify the retrieval, updating and persistence of models over a REST API.</p>
          </div>
        </div>
      </div>
    </div>
  </section> -->
  <section id="comments" align="center">
    <div id="disqus_thread"></div>
    <script type="text/javascript">
      /* * * CONFIGURATION VARIABLES * * */
      var disqus_shortname = 'emberscreencasts';

      // TODO: edit disqus variables so that pages things with different query params get the same disqus thread
      // (currently, they all get unique threads... oops!)
      // (helpful: http://stackoverflow.com/questions/19016530/have-same-disqus-thread-on-multiple-urls)

      /* * * DON'T EDIT BELOW THIS LINE * * */
      (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
      })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a></noscript>
  </section>
  <% if @code_present %>
    <section id="code">
      <div class="container">
        <div class="row">
          <h2>Code</h2>
          <% if @viewable_by_google %>
            <%= @markdown.render(@post.code).html_safe %>
          <% else %>
            <p>Code is for subscribers only.</p>
          <% end %>
        </div>
      </div>
    </section>
  <% end %>
  <% if @transcript_present %>
    <section id="transcript">
      <div class="container">
        <div class="row">
          <h2>Transcript</h2>
          <% if @viewable_by_google %>
            <%= raw @markdown.render @post.transcript %>
          <% else %>
            <p>Transcript is for subscribers only.</p>
          <% end %>
        </div>
      </div>
    </section>
  <% end %>
</div>
